diff -Naur qemu-2.3.1/Makefile.target qemu-2.3.1.cuda/Makefile.target
--- qemu-2.3.1/Makefile.target	2015-08-11 22:19:06.000000000 +0300
+++ qemu-2.3.1.cuda/Makefile.target	2016-04-11 14:52:52.000000000 +0300
@@ -135,6 +135,7 @@
 obj-y += memory_mapping.o
 obj-y += dump.o
 LIBS+=$(libs_softmmu)
+LIBS+=-lcuda
 
 # xen support
 obj-$(CONFIG_XEN) += xen-common.o
diff -Naur qemu-2.3.1/hw/char/Makefile.objs qemu-2.3.1.cuda/hw/char/Makefile.objs
--- qemu-2.3.1/hw/char/Makefile.objs	2015-08-11 22:19:07.000000000 +0300
+++ qemu-2.3.1.cuda/hw/char/Makefile.objs	2016-04-11 14:52:53.000000000 +0300
@@ -5,6 +5,7 @@
 common-obj-$(CONFIG_SERIAL) += serial.o serial-isa.o
 common-obj-$(CONFIG_SERIAL_PCI) += serial-pci.o
 common-obj-$(CONFIG_VIRTIO) += virtio-console.o
+common-obj-$(CONFIG_VIRTIO) += virtio-cuda.o
 common-obj-$(CONFIG_XILINX) += xilinx_uartlite.o
 common-obj-$(CONFIG_XEN_BACKEND) += xen_console.o
 common-obj-$(CONFIG_CADENCE) += cadence_uart.o
@@ -15,7 +16,6 @@
 obj-$(CONFIG_SH4) += sh_serial.o
 obj-$(CONFIG_PSERIES) += spapr_vty.o
 obj-$(CONFIG_DIGIC) += digic-uart.o
-obj-$(CONFIG_STM32F2XX_USART) += stm32f2xx_usart.o
 
 common-obj-$(CONFIG_ETRAXFS) += etraxfs_ser.o
 common-obj-$(CONFIG_ISA_DEBUG) += debugcon.o
diff -Naur qemu-2.3.1/hw/char/virtio-cuda.c qemu-2.3.1.cuda/hw/char/virtio-cuda.c
--- qemu-2.3.1/hw/char/virtio-cuda.c	1970-01-01 02:00:00.000000000 +0200
+++ qemu-2.3.1.cuda/hw/char/virtio-cuda.c	2016-04-11 14:52:53.000000000 +0300
@@ -0,0 +1,351 @@
+#include "hw/virtio/virtio-serial.h"
+#include "hw/virtio/virtio-cuda.h"
+#include <stdlib.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <sys/ioctl.h>
+#include <cuda.h>
+#include <dlfcn.h>
+
+static uint32_t get_features(VirtIODevice *vdev, uint32_t features)
+{
+	return features;
+}
+
+static void get_config(VirtIODevice *vdev, uint8_t *config_data)
+{
+}
+
+static void set_config(VirtIODevice *vdev, const uint8_t *config_data)
+{
+}
+
+static void set_status(VirtIODevice *vdev, uint8_t status)
+{
+}
+
+static void vser_reset(VirtIODevice *vdev)
+{
+}
+
+static void vq_handle_output(VirtIODevice *vdev, VirtQueue *vq)
+{
+	VirtQueueElement elem;
+	
+	while(virtqueue_pop(vq, &elem)) {
+		struct param *p = elem.out_sg[0].iov_base;
+	
+		//for all library routines: get required arguments from buffer, execute, and push results back in virtqueue
+		switch (p->syscall_type) {
+		case CUINIT: {
+			p->result = cuInit(p->flags);
+			break;
+		}
+		case CUDRIVERGETVERSION: {
+			p->result = cuDriverGetVersion(&p->val1);
+			break;
+		}
+		case CUDEVICEGETCOUNT: {
+			p->result = cuDeviceGetCount(&p->val1);
+			break;
+		}
+		case CUDEVICEGET: {
+			p->result = cuDeviceGet(&p->device, p->val1);
+			break;
+		}
+		case CUDEVICECOMPUTECAPABILITY: {
+			p->result = cuDeviceComputeCapability(&p->val1, &p->val2, p->device);
+			break;
+		}
+		case CUDEVICEGETNAME: {
+			p->result = cuDeviceGetName(elem.in_sg[0].iov_base, p->val1, p->device);
+			break;
+		}
+		case CUDEVICEGETATTRIBUTE: {
+			p->result = cuDeviceGetAttribute(&p->val1, p->attrib, p->device);
+			break;
+		}
+		case CUCTXCREATE: {
+                        p->result = cuCtxCreate(&p->ctx, p->flags, p->device);				
+			break;
+		}
+		case CUCTXDESTROY: {
+			p->result = cuCtxDestroy(p->ctx);
+			break;
+		}
+		case CUCTXGETCURRENT: {
+			p->result = cuCtxGetCurrent(&p->ctx);
+			break;
+		}
+		case CUCTXGETDEVICE: {
+			p->result = cuCtxGetDevice(&p->device);
+			break;
+		}
+		case CUCTXPOPCURRENT: {
+			p->result = cuCtxPopCurrent(&p->ctx);
+			break;
+		}
+		case CUCTXSETCURRENT: {
+			p->result = cuCtxSetCurrent(p->ctx);
+	                break;
+		}
+	        case CUCTXSYNCHRONIZE: {
+		        p->result = cuCtxSynchronize();
+	                break;
+	        }
+		case CUMODULELOAD: {
+			//hardcoded path - needs improvement
+			//all .cubin files should be stored in $QEMU_NFS_PATH - currently $QEMU_NFS_PATH is shared between host and guest with NFS
+			char *binname = malloc((strlen((char *)elem.out_sg[1].iov_base)+strlen(getenv("QEMU_NFS_PATH")+1))*sizeof(char));
+			if (!binname) {
+				p->result = 0;
+		                virtqueue_push(vq, &elem, 0);
+				break;
+			}
+		        strcpy(binname, getenv("QEMU_NFS_PATH"));
+		        strcat(binname, (char *)elem.out_sg[1].iov_base);
+			//change current CUDA context
+			//each CUDA contets has its own virtual memory space - isolation is ensured by switching contexes
+                        if (cuCtxSetCurrent(p->ctx) != 0) {
+				p->result = 999;
+                                break;
+			}
+			p->result = cuModuleLoad(&p->module, binname);
+			free(binname);
+			break;
+		}
+                case CUMODULEGETGLOBAL: {
+                        char *name = malloc(100*sizeof(char));
+                        if (!name) {
+                                p->result = 999;
+                                break;
+                        }
+                        strcpy(name, (char *)elem.out_sg[1].iov_base);
+                        p->result = cuModuleGetGlobal(&p->dptr,&p->size1,p->module,(const char *)name);
+                        break;
+                }
+		case CUMODULEUNLOAD: {
+			p->result = cuModuleUnload(p->module);
+			break;			
+		}
+		case CUMEMALLOC: {
+			if (cuCtxSetCurrent(p->ctx) != 0) {
+                                p->result = 999;
+                                break;
+                        }
+			p->result = cuMemAlloc(&p->dptr, p->bytesize);
+			break;
+		}
+                case CUMEMALLOCPITCH: {
+                        if (cuCtxSetCurrent(p->ctx) != 0) {
+                                p->result = 999;
+                                break;
+                        }
+			p->result = cuMemAllocPitch(&p->dptr, &p->size3, p->size1, p->size2, p->bytesize);
+			break;
+		}
+		//large buffers are alocated in smaller chuncks in guest kernel space
+		//gets each chunck seperately and copies it to device memory
+	        case CUMEMCPYHTOD: {
+			int i;
+			size_t offset;
+                        unsigned long s, nr_pages = p->nr_pages;
+                        if (cuCtxSetCurrent(p->ctx) != 0) {
+                                p->result = 999;
+                                break;
+                        }
+			offset = 0;
+			for (i=0; i<nr_pages; i++) {
+				s = *(long *)elem.out_sg[1+2*i+1].iov_base;
+				p->result = cuMemcpyHtoD(p->dptr+offset, elem.out_sg[1+2*i].iov_base, s);
+				if (p->result != 0) break;
+				offset += s;
+			}
+	                break;
+		}
+		case CUMEMCPYHTODASYNC: {
+			int i;
+                        size_t offset;
+                        unsigned long s, nr_pages = p->nr_pages;
+                        if (cuCtxSetCurrent(p->ctx) != 0) {
+                                p->result = 999;
+                                break;
+                        }
+                        offset = 0;
+			for (i=0; i<nr_pages; i++) {
+                                s = *(long *)elem.out_sg[1+2*i+1].iov_base;
+                                p->result = cuMemcpyHtoDAsync(p->dptr+offset, elem.out_sg[1+2*i].iov_base, s, p->stream);
+                                if (p->result != 0) break;
+                                offset += s;
+                        }
+                        break;
+		}
+		case CUMEMCPYDTODASYNC: {
+			p->result = cuMemcpyDtoDAsync(p->dptr, p->dptr1, p->size1, p->stream);
+                        break;		
+		}
+	        case CUMEMCPYDTOH: {
+			int i;
+                        unsigned long s, nr_pages = p->nr_pages;
+                        if (cuCtxSetCurrent(p->ctx) != 0) {
+                                p->result = 999;
+                                break;
+                        }
+			size_t offset = 0;
+			for (i=0; i<nr_pages; i++) {
+				s = *(long *)elem.in_sg[0+2*i+1].iov_base;
+				p->result = cuMemcpyDtoH(elem.in_sg[0+2*i].iov_base, p->dptr+offset, s);
+				if (p->result != 0) break;
+				offset += s;
+			}
+			break;
+		}
+		case CUMEMCPYDTOHASYNC: {
+			int i;
+                        unsigned long s, nr_pages = p->nr_pages;
+                        if (cuCtxSetCurrent(p->ctx) != 0) {
+                                p->result = 999;
+                                break;
+                        }
+                        size_t offset = 0;
+			for (i=0; i<nr_pages; i++) {
+                                s = *(long *)elem.in_sg[0+2*i+1].iov_base;
+                                p->result = cuMemcpyDtoHAsync(elem.in_sg[0+2*i].iov_base, p->dptr+offset, s, p->stream);
+                                if (p->result != 0) break;
+                                offset += s;
+                        }
+			break;
+		}
+		case CUMEMSETD32: {
+			p->result = cuMemsetD32(p->dptr, p->bytecount, p->bytesize);
+			break;
+		}
+	        case CUMEMFREE: {
+	                p->result = cuMemFree(p->dptr);
+	                break;
+	        }
+		case CUMODULEGETFUNCTION: {
+			char *name = (char *)elem.out_sg[1].iov_base;
+			name[p->length] = '\0';
+                        if (cuCtxSetCurrent(p->ctx) != 0) {
+                                p->result = 999;
+                                break;
+                        }
+			p->result = cuModuleGetFunction(&p->function, p->module, name);
+			break;	
+		}
+		case CULAUNCHKERNEL: {
+			void **args = malloc(p->val1*sizeof(void *));
+	                if (!args) {
+				p->result = 9999;
+	                        break;
+        	        }
+			int i;
+			for (i=0; i<p->val1; i++) {
+				args[i] = elem.out_sg[1+i].iov_base;
+			}
+                        if (cuCtxSetCurrent(p->ctx) != 0) {
+                                p->result = 999;
+                                break;
+                        }
+			p->result = cuLaunchKernel(p->function,
+					p->gridDimX, p->gridDimY, p->gridDimZ,
+			                p->blockDimX, p->blockDimY, p->blockDimZ,
+					p->bytecount, 0, args, 0);
+			free(args);
+			break;
+		}
+		case CUEVENTCREATE: {
+			p->result = cuEventCreate(&p->event1, p->flags);
+			break;
+		}
+		case CUEVENTDESTROY: {
+			p->result = cuEventDestroy(p->event1);
+			break;
+		}
+		case CUEVENTRECORD: {
+			p->result = cuEventRecord(p->event1, p->stream);
+			break;
+		}
+		case CUEVENTSYNCHRONIZE: {
+			p->result = cuEventSynchronize(p->event1);
+			break;
+		}
+		case CUEVENTELAPSEDTIME: {
+			p->result = cuEventElapsedTime(&p->pMilliseconds, p->event1, p->event2);
+			break;
+		}
+		case CUSTREAMCREATE: {
+			p->result =  cuStreamCreate(&p->stream, 0);
+			break;
+		}		
+                case CUSTREAMSYNCHRONIZE: {
+                        p->result = cuStreamSynchronize(p->stream);
+                        break;
+                }
+                case CUSTREAMQUERY: {
+                        p->result = cuStreamQuery(p->stream);
+                        break;
+                }
+		case CUSTREAMDESTROY: {
+                        p->result = cuStreamDestroy(p->stream);
+                        break;
+                }
+
+		default: 
+			printf("Unknown syscall_type\n");
+		}
+		virtqueue_push(vq, &elem, 0);
+	}
+	//notify frontend - trigger virtual interrupt
+	virtio_notify(vdev, vq);
+	return;
+}
+
+static void virtio_cuda_realize(DeviceState *dev, Error **errp)
+{
+	VirtIODevice *vdev = VIRTIO_DEVICE(dev);
+
+	virtio_init(vdev, "virtio-cuda", 13, 0);
+	virtio_add_queue(vdev, 1024, vq_handle_output);
+}
+
+static void virtio_cuda_unrealize(DeviceState *dev, Error **errp)
+{
+}
+
+static Property virtio_cuda_properties[] = {
+	DEFINE_PROP_END_OF_LIST(),
+};
+
+static void virtio_cuda_class_init(ObjectClass *klass, void *data)
+{
+	DeviceClass *dc = DEVICE_CLASS(klass);
+	VirtioDeviceClass *k = VIRTIO_DEVICE_CLASS(klass);
+
+	dc->props = virtio_cuda_properties;
+	set_bit(DEVICE_CATEGORY_INPUT, dc->categories);
+
+	k->realize = virtio_cuda_realize;
+	k->unrealize = virtio_cuda_unrealize;
+	k->get_features = get_features;
+	k->get_config = get_config;
+	k->set_config = set_config;
+	k->set_status = set_status;
+	k->reset = vser_reset;
+}
+
+static const TypeInfo virtio_cuda_info = {
+	.name          = TYPE_VIRTIO_CUDA,
+	.parent        = TYPE_VIRTIO_DEVICE,
+	.instance_size = sizeof(VirtCuda),
+	.class_init    = virtio_cuda_class_init,
+};
+
+static void virtio_cuda_register_types(void)
+{
+	type_register_static(&virtio_cuda_info);
+}
+
+type_init(virtio_cuda_register_types)
diff -Naur qemu-2.3.1/hw/virtio/virtio-pci.c qemu-2.3.1.cuda/hw/virtio/virtio-pci.c
--- qemu-2.3.1/hw/virtio/virtio-pci.c	2015-08-11 22:19:09.000000000 +0300
+++ qemu-2.3.1.cuda/hw/virtio/virtio-pci.c	2016-04-11 14:52:54.000000000 +0300
@@ -35,6 +35,7 @@
 #include "qemu/range.h"
 #include "hw/virtio/virtio-bus.h"
 #include "qapi/visitor.h"
+#include "hw/virtio/virtio-cuda.h"
 
 #define VIRTIO_PCI_REGION_SIZE(dev)     VIRTIO_PCI_CONFIG_OFF(msix_present(dev))
 
@@ -1475,8 +1476,12 @@
                                VirtIOPCIProxy *dev)
 {
     DeviceState *qdev = DEVICE(dev);
+/*
+    BusState *qbus;
+*/
     char virtio_bus_name[] = "virtio-bus";
 
+
     qbus_create_inplace(bus, bus_size, TYPE_VIRTIO_PCI_BUS, qdev,
                         virtio_bus_name);
 }
@@ -1507,6 +1512,74 @@
     .class_init    = virtio_pci_bus_class_init,
 };
 
+
+/* virtio-cuda-pci */
+
+static void virtio_cuda_pci_realize(VirtIOPCIProxy *vpci_dev, Error **errp)
+{
+    VirtIOCudaPCI *dev = VIRTIO_CUDA_PCI(vpci_dev);
+    DeviceState *vdev = DEVICE(&dev->vdev);
+    DeviceState *proxy = DEVICE(vpci_dev);
+    char *bus_name;
+
+
+    if (vpci_dev->class_code != PCI_CLASS_COMMUNICATION_OTHER &&
+        vpci_dev->class_code != PCI_CLASS_DISPLAY_OTHER && /* qemu 0.10 */
+        vpci_dev->class_code != PCI_CLASS_OTHERS) {        /* qemu-kvm  */
+            vpci_dev->class_code = PCI_CLASS_COMMUNICATION_OTHER;
+    }
+
+    if (proxy->id) {
+        bus_name = g_strdup_printf("%s.0", proxy->id);
+        virtio_device_set_child_bus_name(VIRTIO_DEVICE(vdev), bus_name);
+        g_free(bus_name);
+    }
+
+    qdev_set_parent_bus(vdev, BUS(&vpci_dev->bus));
+    object_property_set_bool(OBJECT(vdev), true, "realized", errp);
+
+}
+
+static Property virtio_cuda_pci_properties[] = {
+    DEFINE_PROP_BIT("ioeventfd", VirtIOPCIProxy, flags,
+                    VIRTIO_PCI_FLAG_USE_IOEVENTFD_BIT, true),
+    DEFINE_PROP_UINT32("vectors", VirtIOPCIProxy, nvectors, 2),
+    DEFINE_PROP_UINT32("class", VirtIOPCIProxy, class_code, 0),
+    DEFINE_VIRTIO_SERIAL_PROPERTIES(VirtIOSerialPCI, vdev.serial),
+    DEFINE_PROP_END_OF_LIST(),
+};
+
+static void virtio_cuda_pci_class_init(ObjectClass *klass, void *data)
+{
+    DeviceClass *dc = DEVICE_CLASS(klass);
+    VirtioPCIClass *k = VIRTIO_PCI_CLASS(klass);
+    PCIDeviceClass *pcidev_k = PCI_DEVICE_CLASS(klass);
+    k->realize = virtio_cuda_pci_realize;
+    set_bit(DEVICE_CATEGORY_INPUT, dc->categories);
+    dc->props = virtio_cuda_pci_properties;
+    pcidev_k->vendor_id = PCI_VENDOR_ID_REDHAT_QUMRANET;
+    pcidev_k->device_id = 0x1013;
+    pcidev_k->revision = VIRTIO_PCI_ABI_VERSION;
+    pcidev_k->class_id = PCI_CLASS_COMMUNICATION_OTHER;
+}
+
+static void virtio_cuda_pci_instance_init(Object *obj)
+{
+    VirtIOCudaPCI *dev = VIRTIO_CUDA_PCI(obj);
+    virtio_instance_init_common(obj, &dev->vdev, sizeof(dev->vdev),
+                                "virtio-cuda");
+    object_property_add_child(obj, "virtio-backend", OBJECT(&dev->vdev), NULL);
+}
+
+static const TypeInfo virtio_cuda_pci_info = {
+    .name          = TYPE_VIRTIO_CUDA_PCI,
+    .parent        = TYPE_VIRTIO_PCI,
+    .instance_size = sizeof(VirtIOCudaPCI),
+    .instance_init = virtio_cuda_pci_instance_init,
+    .class_init    = virtio_cuda_pci_class_init,
+};
+
+
 static void virtio_pci_register_types(void)
 {
     type_register_static(&virtio_rng_pci_info);
@@ -1514,6 +1587,7 @@
     type_register_static(&virtio_pci_info);
 #ifdef CONFIG_VIRTFS
     type_register_static(&virtio_9p_pci_info);
+
 #endif
     type_register_static(&virtio_blk_pci_info);
     type_register_static(&virtio_scsi_pci_info);
@@ -1523,6 +1597,7 @@
 #ifdef CONFIG_VHOST_SCSI
     type_register_static(&vhost_scsi_pci_info);
 #endif
+type_register_static(&virtio_cuda_pci_info);
 }
 
 type_init(virtio_pci_register_types)
diff -Naur qemu-2.3.1/hw/virtio/virtio-pci.h qemu-2.3.1.cuda/hw/virtio/virtio-pci.h
--- qemu-2.3.1/hw/virtio/virtio-pci.h	2015-08-11 22:19:09.000000000 +0300
+++ qemu-2.3.1.cuda/hw/virtio/virtio-pci.h	2016-04-11 14:52:54.000000000 +0300
@@ -31,6 +31,9 @@
 #include "hw/virtio/vhost-scsi.h"
 #endif
 
+#include "hw/virtio/virtio-cuda.h"
+
+typedef struct VirtIOCudaPCI VirtIOCudaPCI;
 typedef struct VirtIOPCIProxy VirtIOPCIProxy;
 typedef struct VirtIOBlkPCI VirtIOBlkPCI;
 typedef struct VirtIOSCSIPCI VirtIOSCSIPCI;
@@ -163,6 +166,18 @@
 };
 
 /*
+ * virtio-cuda-pci: This extends VirtioPCIProxy.
+ */
+#define TYPE_VIRTIO_CUDA_PCI "virtio-cuda-pci"
+#define VIRTIO_CUDA_PCI(obj) \
+        OBJECT_CHECK(VirtIOCudaPCI, (obj), TYPE_VIRTIO_CUDA_PCI)
+
+struct VirtIOCudaPCI {
+    VirtIOPCIProxy parent_obj;
+    VirtCuda vdev;
+};
+
+/*
  * virtio-net-pci: This extends VirtioPCIProxy.
  */
 #define TYPE_VIRTIO_NET_PCI "virtio-net-pci"
diff -Naur qemu-2.3.1/include/hw/virtio/virtio-cuda.h qemu-2.3.1.cuda/include/hw/virtio/virtio-cuda.h
--- qemu-2.3.1/include/hw/virtio/virtio-cuda.h	1970-01-01 02:00:00.000000000 +0200
+++ qemu-2.3.1.cuda/include/hw/virtio/virtio-cuda.h	2016-04-11 14:52:52.000000000 +0300
@@ -0,0 +1,74 @@
+#ifndef VIRTIO_CUDA_H
+#define VIRTIO_CUDA_H
+
+#include <cuda.h>
+//used to distinguish between CUDA Driver calls
+#define CUINIT                          0
+#define CUDRIVERGETVERSION              1
+#define CUDEVICEGETCOUNT                3
+#define CUDEVICEGET                     4
+#define CUDEVICECOMPUTECAPABILITY       5
+#define CUDEVICEGETNAME                 6
+#define CUDEVICEGETATTRIBUTE            7
+#define CUCTXCREATE                     8
+#define CUCTXDESTROY                    9
+#define CUCTXGETCURRENT                 10
+#define CUCTXGETDEVICE                  11
+#define CUCTXPOPCURRENT                 12
+#define CUCTXSETCURRENT                 13
+#define CUMODULELOAD                    14
+#define CUMEMALLOC                      15
+#define CUMEMCPYHTOD                    16
+#define CUMEMCPYDTOH                    17
+#define CUMEMSETD32                     18
+#define CUMEMFREE                       19
+#define CUMODULEGETFUNCTION             20
+#define CULAUNCHKERNEL                  21
+#define CUCTXSYNCHRONIZE                22
+#define CUEVENTCREATE                   23
+#define CUEVENTRECORD                   24
+#define CUEVENTSYNCHRONIZE              25
+#define CUEVENTELAPSEDTIME              26
+#define CUEVENTDESTROY 			27
+#define CUMODULEUNLOAD 			28
+#define CUMEMALLOCPITCH 		29
+#define CUMODULEGETGLOBAL 		30
+#define CUSTREAMCREATE 			31
+#define CUMEMCPYHTODASYNC 		32
+#define CUMEMCPYDTOHASYNC 		33
+#define CUMEMCPYDTODASYNC 		34
+#define CUSTREAMSYNCHRONIZE 		35
+#define CUSTREAMQUERY 			36
+#define CUSTREAMDESTROY 		37
+
+#define TYPE_VIRTIO_CUDA "virtio-cuda"
+
+typedef struct VirtCuda {
+    VirtIODevice parent_obj;
+} VirtCuda;
+
+//same struct as the one used to transfer data between guest user/kernel space - used to transfer between guest driver to backend
+struct param {
+        CUresult result;
+	unsigned int syscall_type;
+        size_t bytesize, total_alloc;
+	CUdevice device;
+	CUcontext ctx;
+	CUmodule module;
+	CUfunction function;
+	CUdeviceptr dptr,dptr1;
+	CUdevice_attribute attrib;
+	CUevent event1, event2;
+	CUstream stream;
+	unsigned int flags;
+	int val1, val2, length;
+	char *name;
+	float pMilliseconds;
+	unsigned int bytecount, gridDimX, gridDimY, gridDimZ, 
+			blockDimX, blockDimY, blockDimZ;
+	unsigned long nr_pages;
+	void *host;
+	void **args;
+	size_t *size, size1, size2, size3;
+};
+#endif
